class Solution {
public:

    //No. of hours required to finish eating all bananas when k is x
    bool check(int x, int h, vector<int>& piles) {
        long long cnt = 0;
        for (int i : piles) {
            cnt += ceil((1.0 * i) / x);
        }
        return (cnt <= h);
    }

    //Apply binary Search to find the minimum k between 1 to max(piles)
    int bs(int n, vector<int>& piles, int h) {
        int high = piles[n - 1];
        int low = 1, mid, ans = 0;
        while (low <= high) {
            mid = (low + high) / 2;
            if (check(mid, h, piles)) {
                ans = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return ans;
    }
    int minEatingSpeed(vector<int>& piles, int h) {
        int n = piles.size();
        sort(piles.begin(), piles.end());
        return bs(n, piles, h);
    }
};
